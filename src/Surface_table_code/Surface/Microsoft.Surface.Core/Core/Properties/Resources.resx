<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotSynchronizeEventDispatchException" xml:space="preserve">
    <value>SynchronizationContext.Current must be non-null in order to invoke events on the current thread</value>
  </data>
  <data name="FiniteOrNaNExpected" xml:space="preserve">
    <value>{0} should be a finite number or NaN.</value>
  </data>
  <data name="RectangleToStringFormat" xml:space="preserve">
    <value>Bounds=({0}, {1}, {2}, {3}), Size=({4}, {5})</value>
  </data>
  <data name="TraceEventThreadExceptionSuppression" xml:space="preserve">
    <value>Unexpected exception in input event processing thread {0}. Suppressing and continuing</value>
  </data>
  <data name="FiniteExpected" xml:space="preserve">
    <value>{0} should be a finite number.</value>
  </data>
  <data name="SetWindowsHookExFailed" xml:space="preserve">
    <value>SetWindowsHookEx failed</value>
  </data>
  <data name="ReadOnlyDictionary_OperationIsNotSupported" xml:space="preserve">
    <value>Operation is not supported because the dictionary is read-only.</value>
  </data>
  <data name="FiniteNonNegativeOrNaNExpected" xml:space="preserve">
    <value>{0} should be a finite non-negative number or NaN.</value>
  </data>
  <data name="ImageTypeNotEnabledException" xml:space="preserve">
    <value>The specified ImageType has not been enabled on this TouchTarget.</value>
  </data>
  <data name="TouchTargetToStringFormat" xml:space="preserve">
    <value>HWND={0}, Touch count = {1}</value>
  </data>
  <data name="InvalidBufferSizeForUpdateRawImageException" xml:space="preserve">
    <value>The supplied buffer is of the incorrect size.</value>
  </data>
  <data name="HwndNotOwnedByCurrentProcess" xml:space="preserve">
    <value>Hwnd is not owned by the current process.</value>
  </data>
  <data name="TouchPointCollectionToStringFormat" xml:space="preserve">
    <value>Count={0}</value>
  </data>
  <data name="SizeFToStringFormat" xml:space="preserve">
    <value>Width={0}, Height={1}</value>
  </data>
  <data name="WindowsApiFailureException" xml:space="preserve">
    <value>{0} failed with error code {1}</value>
  </data>
  <data name="VectorToStringFormat" xml:space="preserve">
    <value>X={0}, Y={1}</value>
  </data>
  <data name="TouchTargetDisposedException" xml:space="preserve">
    <value>The operation is not supported because the TouchTarget has been disposed</value>
  </data>
  <data name="TraceCannotConnectToInputSystem" xml:space="preserve">
    <value>Unable to connect to Input System</value>
  </data>
  <data name="FinitePositiveExpected" xml:space="preserve">
    <value>{0} should be a finite positive number.</value>
  </data>
  <data name="TouchBoundsToStringFormat" xml:space="preserve">
    <value>Bounds=({0}, {1}, {2}, {3}), Size=({4}, {5})</value>
  </data>
  <data name="InvalidImageTypeException" xml:space="preserve">
    <value>This is not a valid image type.</value>
  </data>
  <data name="InteractiveSurfaceToStringFormat" xml:space="preserve">
    <value>Bounds=({0}, {1}, {2}, {3}), Size=({4}, {5})</value>
  </data>
  <data name="TouchPointToStringFormat" xml:space="preserve">
    <value>ID={0}, Position=({1}, {2}), CenterPosition=({3}, {4}), Type={5}</value>
  </data>
  <data name="FrameEventsAlreadyDisabled" xml:space="preserve">
    <value>DisableFrameEvents must be preceded by a call to EnableFrameEvents.</value>
  </data>
  <data name="PointFToStringFormat" xml:space="preserve">
    <value>X={0}, Y={1}</value>
  </data>
  <data name="FiniteNonNegativeExpected" xml:space="preserve">
    <value>{0} should be a finite non-negative number.</value>
  </data>
</root>